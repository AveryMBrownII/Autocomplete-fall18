Avery Brown (amb222)

(1) Run the program BenchmarkForAutocomplete and copy/paste the 
results here this for #matches = 20

search	size	#match	binary	brute
20 20
	456976	20	0.5272	0.0171
a	17576	20	0.0049	0.0429
b	17576	20	0.0055	0.0126
20 20
c	17576	20	0.0062	0.0098
x	17576	20	0.0083	0.0140
y	17576	20	0.0055	0.0087
z	17576	20	0.0044	0.0090
aa	676	20	0.0001	0.0088
az	676	20	0.0001	0.0085
za	676	20	0.0001	0.0082
zz	676	20	0.0002	0.0139


(2) Run the program again for #matches = 10000, paste the results, 
and then make any conclusions about how the # matches 
effects the runtime. 

search	size	#match	binary	brute
1000 1000
	456976	1000	0.4967	0.0293
1000 1000
a	17576	1000	0.0123	0.0153
1000 1000
b	17576	1000	0.0140	0.0144
1000 1000
c	17576	1000	0.0077	0.0121
1000 1000
x	17576	1000	0.0064	0.0087
1000 1000
y	17576	1000	0.0053	0.0097
1000 1000
z	17576	1000	0.0055	0.0089
aa	676	1000	0.0002	0.0081
az	676	1000	0.0002	0.0149
za	676	1000	0.0003	0.0090
zz	676	1000	0.0003	0.0115

The number of matches in theory would affect the runtime, but in practice, does not affect the runtime because 
it is log(n) so if the matches(n) changes, the runtime barely changes


(3) Copy/paste the code from BruteAutocomplete.topMatches below. 
Explain what the Big-Oh complexity of the entire loop: 
for(Term t : myTerms) {...} 
is in terms of N, the number of elements in myTerms and 
M, the number of terms that match the prefix. 
Assume that every priority-queue operation runs in O(log k) time. 
Explain your answer which should be in terms of N, M, and k.


public List<Term> topMatches(String prefix, int k) {
		if (k < 0) {
			throw new IllegalArgumentException("Illegal value of k:"+k);
		}
		
		// maintain pq of size k
		PriorityQueue<Term> pq = new PriorityQueue<Term>(10, new Term.WeightOrder());
		for (Term t : myTerms) {
			if (!t.getWord().startsWith(prefix))
				continue;
			if (pq.size() < k) {
				pq.add(t);
			} else if (pq.peek().getWeight() < t.getWeight()) {
				pq.remove();
				pq.add(t);
			}
		}
		int numResults = Math.min(k, pq.size());
		LinkedList<Term> ret = new LinkedList<>();
		for (int i = 0; i < numResults; i++) {
			ret.addFirst(pq.remove());
		}
		return ret;
	}
	
The Big-Oh complexity of the entire loop is N+Mlog(M)+k. 
You have to search through N terms to find M terms that have the desired prefix, and then
you have to sort the M terms in order (which takes Mlog(M) time) and then return the desired k 
queries from the M terms.


(4) Explain why the last for loop in BruteAutocomplete.topMatches 
uses a LinkedList (and not an ArrayList) 
AND why the PriorityQueue uses Term.WeightOrder to get 
the top k heaviest matches -- rather than 
using Term.ReverseWeightOrder.

The last for-loop uses a LinkedList as opposed to an ArrayList because 
adding an element to the front of a LinkedList is O(1) because it uses nodes
while adding an element to the front of an ArrayList is O(n) because once the element is added
all the other elements after have to be shifted down

PriorityQueue uses Term.WeightOrder to get the top k heaviest matches because when the priority queue
is full and another element is added, all the elements are compared using the WeightOrder class and 
the element that is the smallest is removed from the queue



(5) Explain what the runtime of the 
BinarySearchAutocomplete.topMatches code that you 
implemented is by copy/pasting the code below 
and explaining your answer in terms of N, M, and k.

	public List<Term> topMatches(String prefix, int k) {
		if (k < 0) throw new IllegalArgumentException("Illegal value of k:"+k);
		
		ArrayList<Term> list = new ArrayList<>();
		Term key = new Term(prefix,0);
		
		int first = firstIndexOf(myTerms,key, new Term.PrefixOrder(prefix.length()));
		if (first == -1) return list;
		
		int last = lastIndexOf(myTerms,key, new Term.PrefixOrder(prefix.length()));
		
		for (int x = 0; x < 1+(last-first); x++) {
			list.add(myTerms[first+x]);
		}
		Collections.sort(list, new Term.ReverseWeightOrder());
		ArrayList<Term> answer = new ArrayList<>();
		int min = Math.min(list.size(), k);
		for(int x = 0; x < min; x++) {
			answer.add(list.get(x));
		}
		return answer;
	}
	
The Big oh runtime complexity is log(N)+Mlog(M)+k (since I didn't use a priority queue)
You have to search through log(N) terms by using a binary search and then find the first and last index of the 
the M terms that have the desired prefix(which takes Mlog(M) time) and then return the 
desired k queries from the M terms.

